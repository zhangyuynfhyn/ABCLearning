本周主要学习练习内容

一、linux常用命令练习
	
free
内存使用情况
	free [param]
		-b Byte
		-k KB
		-m MB
		-s<间隔秒数> 持续观察内存使用状况

top
实时显示系统中各个进程得资源占用状况
	top [param]
		-b 以批处理模式操作
		-u[用户名] 指定用户名
		-p[进程号] 指定进程
		
ps
查看进程
	ps [param]
	-A 显示所有进程与-e具有相同效果
	-a 显示现行终端机下得所有进程
	-l 较为详细的输出PID信息

chmod
文件权限设置
	chmod u|g|o|a  =(设置权限)|+(添加权限)|-(减少权限)  r|w|x  文件或者目录
		u owner
		g group
		o other
		a all
		
		r 1
		w 2
		x 4

unzip
	-c 显示解压结果，并对字符做适当的转换
	-p 显示解压结果，但不执行任何转换
	-f 更新现有文件
	-u 更新现有文件，并解压其他文件到目录中
	-l 显示包内所包含的文件
	-t 检查压缩文件正确性
	-a 对文本文件进行必要转换
	-b 不对文本文件进行字符转换
	-n 解压时不覆盖原有文件
	-o 不询问用户，解压后覆盖原有文件
	-P<密码> 密码选项
	-q 执行时不显示任何信息
	-d<目录> 指定解压文件存储目录
	-x<文件> 指定不处理的文件
	
du
查看文件大小
	-h 高可读性显示
	-s 仅显示总计
	-a 显示目录中个别文件的大小
	--exclude=<目录或文件> 略过指定文件或目录
	--max-depth=<目录层数> 超过指定层数的目录后忽略

sort
文件数据排序，显示排序结果
	
uniq
去除文件重复行
	-c 打印每行在文本中重复出现的次数
	-d 只显示有重复的纪录，每个重复纪录只出现一次
	-u 只显示没有重复的纪录

echo
显示内容
	-n 输出后不换行
	-e 遇到转义字符特殊处理

less
逐屏查看文件内容，在查看前不会加载整个文件
	-m 显示百分比
	-N 显示行号
	? 上搜
	/ 下搜
	b d 翻页

grep 
grep '正则表达式' 文件名
	-c 仅输出匹配的行数
	-I 不区分大小写
	-l 只显示文件名
	-v 显示不包含匹配文本的所有行
	-n 显示匹配行数及行号
	
wc 
统计指定文件中的字节数、字数、行数，并显示统计结果
	-l 报告行数
	-c 报告字节数
	-m 报告字符数
	-w 报告单词数
	
paste
合并文件
	-d 指定不同空格或tab键的域分隔符
	-s 按行合并，单独一个文件为一行
	
	
	
whereis 
定位可执行文件、源代码文件、帮助文件在文件系统中的位置
whereis [-bmsu] [BMS 目录名 -f ] 文件名| 
	-b 定位可执行文件。
	-m 定位帮助文件。
	-s 定位源代码文件。
	-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。
	-B 指定搜索可执行文件的路径。
	-M 指定搜索帮助文件的路径。
	-S 指定搜索源代码文件的路径。
	
vi
1）插入模式
   按「i」切换进入插入模式「insert mode」，按"i"进入插入模式后是从光标当前位置开始输入文件；
   按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；
   按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。

2）从插入模式切换为命令行模式
	按「ESC」键。
3）移动光标
　　vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。
　　按「ctrl」+「b」：屏幕往"后"移动一页。
　　按「ctrl」+「f」：屏幕往"前"移动一页。
　　按「ctrl」+「u」：屏幕往"后"移动半页。
　　按「ctrl」+「d」：屏幕往"前"移动半页。
　　按数字「0」：移到文章的开头。
　　按「G」：移动到文章的最后。
　　按「$」：移动到光标所在行的"行尾"。
	按「^」：移动到光标所在行的"行首"
　　按「w」：光标跳到下个字的开头
　　按「e」：光标跳到下个字的字尾
　　按「b」：光标回到上个字的开头
　　按「#l」：光标移到该行的第#个位置，如：5l,56l。

4）删除文字
　　「x」：每按一次，删除光标所在位置的"后面"一个字符。
　　「#x」：例如，「6x」表示删除光标所在位置的"后面"6个字符。
　　「X」：大写的X，每按一次，删除光标所在位置的"前面"一个字符。
　　「#X」：例如，「20X」表示删除光标所在位置的"前面"20个字符。
　　「dd」：删除光标所在行。
　　「#dd」：从光标所在行开始删除#行
5）复制
　　「yw」：将光标所在之处到字尾的字符复制到缓冲区中。
　　「#yw」：复制#个字到缓冲区
　　「yy」：复制光标所在行到缓冲区。
　　「#yy」：例如，「6yy」表示拷贝从光标所在的该行"往下数"6行文字。
　　「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与"y"有关的复制命令都必须与"p"配合才能完成复制与粘贴功能。

6）替换
　　「r」：替换光标所在处的字符。
　　「R」：替换光标所到之处的字符，直到按下「ESC」键为止。

7）恢复上一次操作
　　「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次"u"可以执行多次回复。

8）更改
　　「cw」：更改光标所在处的字到字尾处
　　「c#w」：例如，「c3w」表示更改3个字

9）跳至指定的行
　　「ctrl」+「g」列出光标所在行的行号。
　　「#G」：例如，「15G」，表示移动光标至文章的第15行行首。
	






	
二、shell编程基础
shell
两种运行方式
	1.在test.sh文件保存路径'./test.sh'
	2.脚本文件作为参数直接运行解释器

变量定义
	test_name="test"
	注意：
		变量名与等号之间没有空格
		变量名组成没有空格，只能包含数字、英文字母、下划线、首个字符不能为数字
		不能使用关键字
	
变量使用
	在变量名前加美元符号$
	test_name="test"
	echo $test_name
	变量名外可加花括号以帮助解释器识别变量边界
	echo "my name is ${test_name}!!!"
	
定义只读变量
    readonly
	my_num="123"
	readonly my_num
	
删除变量
	unset my_num

变量类型
	局部变量
	环境变量
	shell变量
	
shell 字符串
	单引号
		单引号内任何字符都会原样输出，也就是说单引号字符串内的变量是无效的
		单引号内不能出现单独的单引号，可成对出现作字符串拼接
	双引号
		可以有变量
		可出现转义字符

获取字符串长度
	string="abc"
	echo $string
	
提取字符串
	string="my name is bob"
	echo ${string:1:4}#从字符串第2个字符开始截取4个字符

查找字符串
	string="my name is bob"
	echo `expr index "$string am"`
	注意不是单引号二是反引号
	
数组
	数组名=(值1 值2 ......值3)
    my_array = (1 2 3 4 5 6)

读取数组
	${数组名[下标]}
	value1=${my_array[1]}
	
获取数组中所有元素
	echo ${my_array[@]}
	
基本运算符
  算数运算
	a=5
	b=10

	val=`expr $a + $b`
	echo "a + b : $val"

	val=`expr $a - $b`
	echo "a - b : $val"

	val=`expr $a \* $b`
	echo "a * b : $val"

	val=`expr $b / $a`
	echo "b / a : $val"

	val=`expr $b % $a`
	echo "b % a : $val"

	if [ $a == $b ]
	then
		echo "a 等于 b"
	fi
	if [ $a != $b ]
	then
		echo "a 不等于 b"
	fi
	注意：运算符和表达式之间必须要有空格
		  完整的表达式要被反引号包含
		  *前面必须加\才能实现乘法运算
		  
		  
  关系运算
  
a=10
b=20

#判断两数是否相等
if [ $a -eq $b ]
then
   echo "$a -eq $b : a 等于 b"
else
   echo "$a -eq $b: a 不等于 b"
fi
#判断两数是否不等
if [ $a -ne $b ]
then
   echo "$a -ne $b: a 不等于 b"
else
   echo "$a -ne $b : a 等于 b"
fi
#判断大于
if [ $a -gt $b ]
then
   echo "$a -gt $b: a 大于 b"
else
   echo "$a -gt $b: a 不大于 b"
fi
#判断小于
if [ $a -lt $b ]
then
   echo "$a -lt $b: a 小于 b"
else
   echo "$a -lt $b: a 不小于 b"
fi
#判断大于等于
if [ $a -ge $b ]
then
   echo "$a -ge $b: a 大于或等于 b"
else
   echo "$a -ge $b: a 小于 b"
fi
#判断小于等于
if [ $a -le $b ]
then
   echo "$a -le $b: a 小于或等于 b"
else
   echo "$a -le $b: a 大于 b"
fi

布尔运算符
a=10
b=20
#非运算
if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a == $b: a 等于 b"
fi
#与运算
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo "$a 小于 100 且 $b 大于 15 : 返回 true"
else
   echo "$a 小于 100 且 $b 大于 15 : 返回 false"
fi
#或运算
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo "$a 小于 100 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 100 或 $b 大于 100 : 返回 false"
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo "$a 小于 5 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 5 或 $b 大于 100 : 返回 false"
fi

逻辑运算符
	
a=10
b=20
#AND
if [[ $a -lt 100 && $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi
#OR
if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi

字符串运算符
a="abc"
b="efg"
#判断字符串是否相等
if [ $a = $b ]
then
   echo "$a = $b : a 等于 b"
else
   echo "$a = $b: a 不等于 b"

#判断字符串不等
if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a != $b: a 等于 b"
fi
#判断字符串长度是否为0
if [ -z $a ]
then
   echo "-z $a : 字符串长度为 0"
else
   echo "-z $a : 字符串长度不为 0"
fi
#判断字符穿长度是否不为0
if [ -n "$a" ]
then
   echo "-n $a : 字符串长度不为 0"
else
   echo "-n $a : 字符串长度为 0"
fi
#判断字符串是否为空
if [ $a ]
then
   echo "$a : 字符串不为空"
else
   echo "$a : 字符串为空"
fi

Echo

#read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量
read name
echo "my name is $name"

显示换行
echo -e "OK! \n" 
# -e 开启转义
echo "It is a test"

显示结果定向至文件
	echo "It is a test" >myfile
	
printf
	printf format-string [argument...]
	format-string 为控制格式字符串
	argument 参数列表
printf "%-10s %-8s %-4s\n" 姓名 性别 体重kg  
printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234
printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543
printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876

%s %c %d %f 都是格式替代符
	％s 输出一个字符串
	％d 整型输出
	％c 输出一个字符
	％f 输出实数，以小数形式输出。

%-10s 指一个宽度为 10 个字符
	- 表示左对齐，没有则表示右对齐，
	任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。

%-4.2f 指格式化为小数，其中 .2 指保留2位小数。
	
	
	
		
		